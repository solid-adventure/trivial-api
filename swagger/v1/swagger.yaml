---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/apps/{id}/api_key":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    post:
      summary: Obtain a new API key
      tags:
      - API Keys
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: API key issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
    put:
      summary: Refresh an expired API key
      tags:
      - API Keys
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: New API key issued and stored in credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
        '401':
          description: Authentication failed
        '409':
          description: API key does not match key stored in credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
  "/auth":
    post:
      summary: Register a user
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: user created
        '422':
          description: unprocessable entity - email taken; name, email, password blank
            or too short!
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
              required:
              - email
              - password
              - name
  "/auth/sign_in":
    post:
      summary: Sign in a user
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: user logged in
        '401':
          description: unauthorized - email or password is wrong
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/auth/sign_out":
    delete:
      summary: Sign out a user
      tags:
      - Auth
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: user signed out
        '404':
          description: unauthorized - invalid login credentials in the header
  "/credential_sets":
    get:
      summary: Return a list of credential sets for the account
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential sets returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_sets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        credential_type:
                          type: string
                      required:
                      - id
                      - name
                      - credential_type
                required:
                - credential_sets
    post:
      summary: Create a new credential set
      tags:
      - Credential Sets
      parameters: []
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential set created
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                required:
                - credential_set
        '422':
          description: Invalid credential set body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credential_set:
                  type: object
                  properties:
                    name:
                      type: string
                    credential_type:
                      type: string
                  required:
                  - name
                  - credential_type
                credentials:
                  type: object
              required:
              - credential_set
  "/credential_sets/{set_id}":
    parameters:
    - name: set_id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Access the credential data for a set
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential data returned for set
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                  credentials:
                    type: object
                required:
                - credential_set
                - credentials
        '404':
          description: Incorrect id
    put:
      summary: Update the credential set and/or its credential data
      tags:
      - Credential Sets
      parameters: []
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credentials updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                required:
                - credential_set
        '422':
          description: Invalid credential set body
        '404':
          description: Incorrect id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credential_set:
                  type: object
                  properties:
                    name:
                      type: string
                    credential_type:
                      type: string
                  required:
                  - name
                  - credential_type
                credentials:
                  type: object
    patch:
      summary: Update a single value within the credential data for a set
      tags:
      - Credential Sets
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: Credentials updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                - ok
        '422':
          description: Invalid path or current value
        '404':
          description: Incorrect id
        '401':
          description: Invalid or missing API key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: array
                  items: string
                credentials:
                  type: object
                  properties:
                    current_value:
                      type: string
                    new_value:
                      type: string
                  required:
                  - current_value
                  - new_value
              required:
              - path
              - credentials
    delete:
      summary: Delete the credential set and its credential data
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credentials deleted
        '404':
          description: Incorrect id
  "/credential_sets/{set_id}/api_key":
    parameters:
    - name: set_id
      in: path
      required: true
      schema:
        type: string
    put:
      summary: Refresh an expired API key
      tags:
      - Credential Sets
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: New API key issued and stored in credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                  required:
                  - api_key
        '401':
          description: Authentication failed
        '409':
          description: API key does not match key stored in credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
  "/apps/{id}/credentials":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    patch:
      summary: Refresh an expired API key
      tags:
      - App Credentials
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: Single credential value updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '401':
          description: Authentication failed
        '400':
          description: Invalid path or incorrect stored value
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: array
                  items:
                    type: string
                credentials:
                  type: object
                  properties:
                    current_value:
                      type: string
                    new_value:
                      type: string
  "/teams":
    get:
      summary: Show the list of the teams
      tags:
      - Team
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: team listed - only for admin
        '401':
          description: unauthorized - not logged in or not admin
    post:
      summary: Create a team
      tags:
      - Team
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: team created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
  "/teams/{teamId}":
    get:
      summary: Show the team with teamId
      tags:
      - Team
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: teamId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show team
    put:
      summary: Update the team with teamId
      tags:
      - Team
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: team updated
        '400':
          description: bad request
        '401':
          description: unauthorized
    delete:
      summary: Destroy the team with teamId
      tags:
      - Team
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: team deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/profiles":
    get:
      summary: Show user profile
      tags:
      - Profile
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: show profile
        '400':
          description: bad request
        '401':
          description: unauthorized
        '422':
          description: unprocessable entity - when user try to change the team
    put:
      summary: Update user profile
      tags:
      - Profile
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: update profile
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/users":
    get:
      summary: Show the list of the users
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: users listed
        '400':
          description: bad request
        '401':
          description: unauthorized
    post:
      summary: Create a user
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: user created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                team_id:
                  type: integer
                role:
                  type: string
                approval:
                  type: string
              required:
              - email
              - password
              - name
  "/users/{userId}":
    get:
      summary: Show the user with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show user
    put:
      summary: Update the User with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: user updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                team_id:
                  type: integer
                role:
                  type: string
                approval:
                  type: string
              required:
              - email
              - password
              - name
    delete:
      summary: Destroy the team with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: user deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
        '422':
          description: unprocessable entity - when try to delete team manager
  "/members":
    get:
      summary: Show the list of the members
      tags:
      - Member
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: members listed
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/members/{userId}":
    get:
      summary: Show the member with userId
      tags:
      - Member
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show member
        '400':
          description: bad request
        '401':
          description: unauthorized
    put:
      summary: Update the Member with userId
      tags:
      - Member
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: member updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
                approval:
                  type: string
  "/boards":
    get:
      summary: Show the list of the boards
      tags:
      - Board
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: boards listed
        '400':
          description: bad request
        '401':
          description: unauthorized
    post:
      summary: Create a board
      tags:
      - Board
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: board created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                access_level:
                  type: string
                contents:
                  type: string
              required:
              - name
  "/boards/{boardId}":
    get:
      summary: Show the board with boardId
      tags:
      - Board
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: boardId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show board
        '400':
          description: bad request
        '401':
          description: unauthorized
    put:
      summary: Update the Board with boardId
      tags:
      - Board
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: member updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                access_level:
                  type: string
                contents:
                  type: string
    delete:
      summary: Destroy the board with boardId
      tags:
      - Board
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: board deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/flows":
    post:
      summary: Create a flow
      tags:
      - Flow
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: flow created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                access_level:
                  type: string
                contents:
                  type: string
              required:
              - name
  "/flows/{flowId}":
    get:
      summary: Show the flow with flowId
      tags:
      - Flow
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: flowId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show flow
        '400':
          description: bad request
        '401':
          description: unauthorized
    put:
      summary: Update the User with flowId
      tags:
      - Flow
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: flow updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                access_level:
                  type: string
                contents:
                  type: string
    delete:
      summary: Destroy the team with flowId
      tags:
      - Flow
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: flow deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/stages":
    post:
      summary: Create a stage
      tags:
      - Stage
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: stage created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                subcomponents:
                  type: string
                contents:
                  type: string
              required:
              - name
  "/stages/{stageId}":
    get:
      summary: Show the stage with stageId
      tags:
      - Stage
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: stageId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show stage
        '400':
          description: bad request
        '401':
          description: unauthorized
    put:
      summary: Update the User with stageId
      tags:
      - Stage
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: stage updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                access_level:
                  type: string
                contents:
                  type: string
    delete:
      summary: Destroy the team with stageId
      tags:
      - Stage
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: stage deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
  "/connections":
    post:
      summary: Create a connection
      tags:
      - Connection
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: connection created
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                form_id:
                  type: integer
                to_id:
                  type: integer
                transform:
                  type: string
              required:
              - name
  "/connections/{connectionId}":
    get:
      summary: Show the connection with connectionId
      tags:
      - Connection
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: connectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show connection
        '400':
          description: bad request
        '401':
          description: unauthorized
    put:
      summary: Update the User with connectionId
      tags:
      - Connection
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: connection updated
        '400':
          description: bad request
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                form_id:
                  type: integer
                to_id:
                  type: integer
                transform:
                  type: string
              required:
              - name
    delete:
      summary: Destroy the team with connectionId
      tags:
      - Connection
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '204':
          description: connection deleted
        '400':
          description: bad request
        '401':
          description: unauthorized
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: https://trivial-api-staging.herokuapp.com/
components:
  securitySchemes:
    access_token:
      type: apiKey
      name: access-token
      in: header
    client:
      type: apiKey
      name: client
      in: header
    expiry:
      type: apiKey
      name: expiry
      in: header
    uid:
      type: apiKey
      name: uid
      in: header
    app_api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT
