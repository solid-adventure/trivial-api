---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/apps/{id}/api_key":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    post:
      summary: Obtain a new API key
      tags:
      - API Keys
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: API key issued
          content:
            application/json:
              example:
                api_key: eyJhbGciOiJSUzI1NiJ9.eyJhcHAiOiJhNDhiNzVjMWY0MmJhNyIsImV4cCI6MTY0ODA0MjU3MH0.ONfChoYSHBnAgx6Png02W-pnFZWk69Fsy7N_juEl0ZipqM_ywfNPhVzQd4sSxahVX0XeIBKFKXHa_f4bWFiuuC_CYNfzl7zfDf-RdS8nbXorerxLH3Ara6JTazxjfOnGnyCnLJ_kljWIMxpiMudGgqCD4eDriG1r0tOGIUB_lgLlhtH7KdbD8tfbvyTUasVRGJ0fm2_zQB2D1LdoqGQS67ZA02XK65wFr0LQGZz0YYxqct_fk9v-NXYVYgz4YLLItdLaRoYmTJOWWc_4pTrUFXacqt1AwjDcQFKSg1WEmkgJO3pOh6wAoLCFmSrIEzyVtSNcY7eW_p956YQA5FkJng
              schema:
                type: object
                properties:
                  api_key:
                    type: string
    put:
      summary: Refresh an expired API key
      tags:
      - API Keys
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: New API key issued and stored in credentials
          content:
            application/json:
              example:
                api_key: eyJhbGciOiJSUzI1NiJ9.eyJhcHAiOiJjOGEwYjc1YTMzZTk1OSIsImV4cCI6MTY0ODA0MjU3MH0.6sTEUfZ4SgxvTLEBQ1ylIrstQSyc4ckOzl2C5RPcC70GdNyiKVlOIwmGaE2lO39YZpIET3EVsgHM-Bh4vPnJq5qKPZXWu2D-VdV7I2DAqsiy7wt8G5ReuAgb0eeOL7g7AK2B_XJ1u1plZGFa6a5CkQymCYiWdCnOeLybNo5qknkafg5MuyeBiC1QOo806ztE-zW4SKxanzLdmMXOAg13WDl4EydQ1T9mizdX9ePJNz9y1tB24Er3VBFFBdoI54Fykjxx8ouVs4zKtJ1kqYhZdv4gZGKt5sN5ztXOC3KrZxPEeOZedTLqF49GEAod9pTcIs-FuJNGltcjGIGyTH4fSw
              schema:
                type: object
                properties:
                  api_key:
                    type: string
        '401':
          description: Authentication failed
        '409':
          description: API key does not match key stored in credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
              example:
                path: '1.1'
  "/apps":
    get:
      summary: List the current user's applications
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: App listing
          content:
            application/json:
              example:
              - id: 196
                user_id: 240
                name: 4970505a1e79d1
                port: 3001
                created_at: '2022-03-16T13:36:11.369Z'
                updated_at: '2022-03-16T13:36:11.369Z'
                discarded_at:
                hostname: 4970505a1e79d1
                domain: staging.trivialapps.io
                load_balancer: staging-lb
                descriptive_name: 'Test App #5'
                aws_role: testlambda-ex-1
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    created_at:
                      type: string
                    updated_at:
                      type: string
                    hostname:
                      type: string
                    domain:
                      type: string
                    load_balancer:
                      type: string
                    descriptive_name:
                      type: string
                    aws_role:
                      type: string
                  required:
                  - id
                  - name
                  - created_at
                  - updated_at
                  - hostname
                  - domain
                  - load_balancer
                  - descriptive_name
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
    post:
      summary: Create a new application
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: App created
          content:
            application/json:
              example:
                id: 199
                user_id: 242
                name: c7092b14473f56
                port: 3002
                created_at: '2022-03-16T13:36:11.951Z'
                updated_at: '2022-03-16T13:36:11.951Z'
                discarded_at:
                hostname: c7092b14473f56
                domain: staging.trivialapps.io
                load_balancer: staging-lb
                descriptive_name: A Test
                aws_role: testlambda-ex-1
              schema:
                type:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    created_at:
                      type: string
                    updated_at:
                      type: string
                    hostname:
                      type: string
                    domain:
                      type: string
                    load_balancer:
                      type: string
                    descriptive_name:
                      type: string
                    aws_role:
                      type: string
                  required:
                  - id
                  - name
                  - created_at
                  - updated_at
                  - hostname
                  - domain
                  - load_balancer
                  - descriptive_name
        '422':
          description: Missing or invalid field
          content:
            application/json:
              example:
                errors:
                - Descriptive name can't be blank
                - Descriptive name is too short (minimum is 3 characters)
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                descriptive_name:
                  type: string
              required:
              - descriptive_name
              example:
                descriptive_name: A Test
  "/apps/{appId}":
    get:
      summary: Retrieve details for the app with the given id (name field)
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: App details
          content:
            application/json:
              example:
                id: 202
                user_id: 245
                name: 730488849da64f
                port: 3001
                created_at: '2022-03-16T13:36:12.789Z'
                updated_at: '2022-03-16T13:36:12.789Z'
                discarded_at:
                hostname: 730488849da64f
                domain: staging.trivialapps.io
                load_balancer: staging-lb
                descriptive_name: 'Test App #10'
                aws_role: testlambda-ex-1
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  hostname:
                    type: string
                  domain:
                    type: string
                  load_balancer:
                    type: string
                  descriptive_name:
                    type: string
                  aws_role:
                    type: string
                required:
                - id
                - name
                - created_at
                - updated_at
                - hostname
                - domain
                - load_balancer
                - descriptive_name
        '404':
          description: No app found for the current user with that id
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
    put:
      summary: Update the app
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: App updated
          content:
            application/json:
              example:
                user_id: 248
                id: 205
                descriptive_name: A New Name
                name: f3bebbdc906af0
                port: 3001
                hostname: f3bebbdc906af0
                domain: staging.trivialapps.io
                load_balancer: staging-lb
                created_at: '2022-03-16T13:36:13.630Z'
                updated_at: '2022-03-16T13:36:13.646Z'
                discarded_at:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  hostname:
                    type: string
                  domain:
                    type: string
                  load_balancer:
                    type: string
                  descriptive_name:
                    type: string
                  aws_role:
                    type: string
                required:
                - id
                - name
                - created_at
                - updated_at
                - hostname
                - domain
                - load_balancer
                - descriptive_name
        '404':
          description: No app found for the current user with that id
        '422':
          description: Missing or invalid field
          content:
            application/json:
              example:
                errors:
                - Descriptive name can't be blank
                - Descriptive name is too short (minimum is 3 characters)
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                descriptive_name:
                  type: string
              example:
                descriptive_name: A New Name
    delete:
      summary: Delete the app
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: App deleted
        '404':
          description: No app found for the current user with that id
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
  "/apps/name_suggestion":
    get:
      summary: Retrieve a suggested descriptive name for a new app
      tags:
      - Apps
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: New name suggestion
          content:
            application/json:
              example:
                suggestion: Splendid Biped
              schema:
                type: object
                properties:
                  suggestion:
                    type: string
                required:
                - suggestion
        '401':
          description: Invalid credentials
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
  "/auth":
    post:
      summary: Register a user
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: user created
          content:
            application/json:
              example:
                status: success
                data:
                  id: 257
                  provider: email
                  uid: jane.doe@example.test
                  name: Jane Doe
                  email: jane.doe@example.test
                  created_at: '2022-03-16T13:36:16.267Z'
                  updated_at: '2022-03-16T13:36:16.272Z'
                  role: member
                  approval: approved
                  color_theme:
                  allow_password_change: false
                  aws_role:
        '422':
          description: unprocessable entity - email taken; name, email, password blank
            or too short!
          content:
            application/json:
              example:
                status: error
                data:
                  id:
                  provider: email
                  uid: ''
                  name: Jane Doe
                  email: jane.doe@example.test
                  created_at:
                  updated_at:
                  role: member
                  approval: pending
                  color_theme:
                  allow_password_change: false
                  aws_role:
                errors:
                  password:
                  - can't be blank
                  full_messages:
                  - Password can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
              required:
              - email
              - password
              - name
              example:
                email: jane.doe@example.test
                password: supersecret
                name: Jane Doe
  "/auth/sign_in":
    post:
      summary: Sign in a user
      tags:
      - Auth
      parameters: []
      responses:
        '200':
          description: user logged in
          content:
            application/json:
              example:
                data:
                  id: 258
                  aws_role: testlambda-ex-1
                  email: user22@example.test
                  provider: email
                  name: Test User
                  uid: user22@example.test
                  role: member
                  approval: approved
                  color_theme:
                  allow_password_change: false
        '401':
          description: unauthorized - email or password is wrong
          content:
            application/json:
              example:
                success: false
                errors:
                - Invalid login credentials. Please try again.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
              example:
                email: user22@example.test
                password: insecure
  "/auth/sign_out":
    delete:
      summary: Sign out a user
      tags:
      - Auth
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: user signed out
          content:
            application/json:
              example:
                success: true
        '404':
          description: unauthorized - invalid login credentials in the header
          content:
            application/json:
              example:
                success: false
                errors:
                - User was not found or was not logged in.
  "/credential_sets":
    get:
      summary: Return a list of credential sets for the account
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential sets returned
          content:
            application/json:
              example:
                credential_sets:
                - id: 55dd9a95-fd87-43f7-8be4-995d37ad15b4
                  name: Twilio
                  credential_type: TwilioCredentials
                  created_at: '2022-03-16T13:36:18.736Z'
                  updated_at: '2022-03-16T13:36:18.736Z'
              schema:
                type: object
                properties:
                  credential_sets:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        credential_type:
                          type: string
                      required:
                      - id
                      - name
                      - credential_type
                required:
                - credential_sets
    post:
      summary: Create a new credential set
      tags:
      - Credential Sets
      parameters: []
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential set created
          content:
            application/json:
              example:
                credential_set:
                  id: dfbe6509-0390-4701-9c47-93734d822c37
                  name: Mailgun
                  credential_type: MailgunCredentials
                  created_at: '2022-03-16T13:36:19.188Z'
                  updated_at: '2022-03-16T13:36:19.188Z'
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                required:
                - credential_set
        '422':
          description: Invalid credential set body
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credential_set:
                  type: object
                  properties:
                    name:
                      type: string
                    credential_type:
                      type: string
                  required:
                  - name
                  - credential_type
                credentials:
                  type: object
              required:
              - credential_set
              example:
                credential_set:
                  name: Mailgun
                  credential_type: MailgunCredentials
                credentials:
                  api_key: "+7Ucdca1LUQ="
                  domain: example.test
  "/credential_sets/{set_id}":
    parameters:
    - name: set_id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Access the credential data for a set
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credential data returned for set
          content:
            application/json:
              example:
                credential_set:
                  id: 6e60e66f-71fb-498f-b042-a837a14b6d13
                  name: Twilio
                  credential_type: TwilioCredentials
                  created_at: '2022-03-16T13:36:19.949Z'
                  updated_at: '2022-03-16T13:36:19.949Z'
                credentials:
                  account_sid: fa8f7fa53659d6de
                  auth_token: Whe8Y5poyQo=
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                  credentials:
                    type: object
                required:
                - credential_set
                - credentials
        '404':
          description: Incorrect id
    put:
      summary: Update the credential set and/or its credential data
      tags:
      - Credential Sets
      parameters: []
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credentials updated
          content:
            application/json:
              example:
                credential_set:
                  id: d8669753-da54-4c21-aafe-9b671afc0636
                  name: New Name
                  credential_type: TwilioCredentials
                  created_at: '2022-03-16T13:36:20.952Z'
                  updated_at: '2022-03-16T13:36:20.965Z'
              schema:
                type: object
                properties:
                  credential_set:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      credential_type:
                        type: string
                    required:
                    - id
                    - name
                    - credential_type
                required:
                - credential_set
        '422':
          description: Invalid credential set body
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
        '404':
          description: Incorrect id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                credential_set:
                  type: object
                  properties:
                    name:
                      type: string
                    credential_type:
                      type: string
                  required:
                  - name
                  - credential_type
                credentials:
                  type: object
              example:
                credential_set:
                  name: New Name
                  credential_type: TwilioCredentials
                credentials:
                  account_sid: fa8f7fa53659d6de
                  auth_token: Whe8Y5poyQo=
    patch:
      summary: Update a single value within the credential data for a set
      tags:
      - Credential Sets
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: Credentials updated
          content:
            application/json:
              example:
                ok: true
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                required:
                - ok
        '422':
          description: Invalid path or current value
          content:
            application/json:
              example:
                ok: false
                error: Incorrect value or path
        '404':
          description: Incorrect id
        '401':
          description: Invalid or missing API key
          content:
            application/json:
              example:
                errors:
                - Unauthorized!
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: array
                  items: string
                credentials:
                  type: object
                  properties:
                    current_value:
                      type: string
                    new_value:
                      type: string
                  required:
                  - current_value
                  - new_value
              required:
              - path
              - credentials
              example:
                path:
                - code_grant
                - access_token
                credentials:
                  current_value: Whe8Y5poyQo=
                  new_value: zTeYlkd9yzo=
    delete:
      summary: Delete the credential set and its credential data
      tags:
      - Credential Sets
      security:
      - access_token: []
        client: []
        expiry: []
        uid: []
      responses:
        '200':
          description: Credentials deleted
        '404':
          description: Incorrect id
  "/credential_sets/{set_id}/api_key":
    parameters:
    - name: set_id
      in: path
      required: true
      schema:
        type: string
    put:
      summary: Refresh an expired API key
      tags:
      - Credential Sets
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: New API key issued and stored in credentials
          content:
            application/json:
              example:
                api_key: eyJhbGciOiJSUzI1NiJ9.eyJhcHAiOiIyODllNWQ2MDM0MmFkOSIsImV4cCI6MTY0ODA0MjU4NH0.kFtIbSre-K3a19Zk1ZDpVHWaZD77QVK4be56EmO2hWOZFXqYODadqlbvsY5ptX9QA_9JHFHOaxfXuzZDdJiPFAyHXhsZbvKp_NLRvzjJ87KaO7q5ULMkD2vilzoj1QWdfckoCeJnB5lWJK8AgZBVp5SuMCkk7odhp3JAKgCpNOGBXpnC64HwJ1B79BFa0Yxcg_4HGg_DoGSgNrkaIqwgAHe7LCeNVObNeu8zDgE6P0tIMnJoP2vyWafxeSSCSOIgXyacILceNxX7ViCkr73XxOMmXLifkYvl8R2ERTrNmALRrfF3o1mWNQSrbh9Y0M5baWK4Z_3lTJO17ggtpW_1TQ
              schema:
                type: object
                properties:
                  api_key:
                    type: string
                  required:
                  - api_key
        '401':
          description: Authentication failed
        '409':
          description: API key does not match key stored in credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
              example:
                path: api_key
  "/apps/{id}/credentials":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    patch:
      summary: Refresh an expired API key
      tags:
      - App Credentials
      parameters: []
      security:
      - app_api_key: []
      responses:
        '200':
          description: Single credential value updated
          content:
            application/json:
              example:
                ok: true
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
        '401':
          description: Authentication failed
          content:
            application/json:
              example:
                errors:
                - Unauthorized!
        '400':
          description: Invalid path or incorrect stored value
          content:
            application/json:
              example:
                ok: false
                error: Incorrect value or path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: array
                  items:
                    type: string
                credentials:
                  type: object
                  properties:
                    current_value:
                      type: string
                    new_value:
                      type: string
              example:
                path:
                - '1'
                - '1'
                - access_token
                credentials:
                  current_value: secret
                  new_value: new secret
  "/profile":
    get:
      summary: Show the logged in user's profile
      tags:
      - Profile
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: Current profile
          content:
            application/json:
              example:
                user:
                  id: 281
                  name: Test User
                  email: user45@example.test
                  role: admin
                  approval: pending
                  color_theme:
                  created_at: '2022-03-16T13:36:26.583Z'
        '401':
          description: Not authorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
    put:
      summary: Update the logged in user's profile
      tags:
      - Profile
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              example:
                user:
                  id: 283
                  name: My New Name
                  email: user47@example.test
                  role: admin
                  approval: pending
                  color_theme: Light
                  created_at: '2022-03-16T13:36:27.142Z'
        '400':
          description: Bad request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
                - Name is too short (minimum is 3 characters)
        '401':
          description: Not authorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                color_theme:
                  type: string
              example:
                name: My New Name
                color_theme: Light
  "/users":
    get:
      summary: Show the list of the users
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      responses:
        '200':
          description: users listed
          content:
            application/json:
              example:
                users:
                - id: 286
                  name: Test User
                  email: user50@example.test
                  role: admin
                  approval: pending
                  color_theme:
                  created_at: '2022-03-16T13:36:27.959Z'
        '401':
          description: unauthorized or not an admin user
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
    post:
      summary: Create a user
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              example:
                user:
                  id: 289
                  name: Jane Doe
                  email: jane.doe@example.test
                  role: member
                  approval: approved
                  color_theme:
                  created_at: '2022-03-16T13:36:28.774Z'
        '400':
          description: bad request
          content:
            application/json:
              example:
                errors:
                - Email can't be blank
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                approval:
                  type: string
              required:
              - email
              - password
              - name
              example:
                name: Jane Doe
                email: jane.doe@example.test
                password: supersecret
                role: member
                approval: approved
  "/users/{userId}":
    get:
      summary: Show the user with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: show user
          content:
            application/json:
              example:
                user:
                  id: 292
                  name: Test User
                  email: user55@example.test
                  role: member
                  approval: approved
                  color_theme:
                  created_at: '2022-03-16T13:36:29.832Z'
        '404':
          description: No user found with that id
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
    put:
      summary: Update the User with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: user updated
          content:
            application/json:
              example:
                user:
                  id: 297
                  name: New Name
                  email: user60@example.test
                  role: member
                  approval: approved
                  color_theme:
                  created_at: '2022-03-16T13:36:31.176Z'
        '400':
          description: bad request
          content:
            application/json:
              example:
                errors:
                - Name can't be blank
                - Name is too short (minimum is 3 characters)
        '404':
          description: No user found with that id
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                approval:
                  type: string
              example:
                name: New Name
    delete:
      summary: Destroy the team with userId
      tags:
      - User
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: user deleted
        '404':
          description: No user found with that id
        '401':
          description: unauthorized
          content:
            application/json:
              example:
                errors:
                - You need to sign in or sign up before continuing.
  "/webhooks":
    get:
      summary: Retrieve the list of logged requests
      tags:
      - Activity
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: app_id
        in: query
        required: true
      - name: limit
        in: query
        required: false
      responses:
        '200':
          description: Request listing returned
          content:
            application/json:
              example:
              - id: 174
                user_id: 309
                app_id: dd84a12ef22d8f
                update_id:
                activity_type: request
                source: localhost
                status: '200'
                payload:
                  test_data: '12345'
                diagnostics:
                  errors: []
                  events: []
                created_at: '2022-03-16T13:36:34.427Z'
                updated_at: '2022-03-16T13:36:34.427Z'
              schema:
                type: array
                items:
                  type: object
                  properties:
                    app_id:
                      type: string
                    update_id:
                      type: string
                      nullable: true
                    activity_type:
                      type: string
                    status:
                      type: string
                      nullable: true
                    source:
                      type: string
                    payload:
                      type: object
                      nullable: true
                    diagnostics:
                      type: object
                      nullable: true
                  required:
                  - app_id
                  - source
                  - payload
    post:
      summary: Log the start of a request
      tags:
      - Activity
      parameters: []
      responses:
        '201':
          description: Request logged
          content:
            application/json:
              example:
                id: 175
                user_id: 310
                app_id: aacee9326f9b7c
                update_id: 5697dfbe-4718-4cd3-a5cf-aa5164cc2fea
                activity_type: request
                source: localhost
                status:
                payload:
                  test_data: '12345'
                diagnostics:
                created_at: '2022-03-16T13:36:34.733Z'
                updated_at: '2022-03-16T13:36:34.733Z'
              schema:
                type: object
                properties:
                  app_id:
                    type: string
                  update_id:
                    type: string
                  activity_type:
                    type: string
                  status:
                    type: string
                    nullable: true
                  source:
                    type: string
                  payload:
                    type: object
                    nullable: true
                  diagnostics:
                    type: object
                    nullable: true
                required:
                - app_id
                - update_id
                - source
                - payload
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                app_id:
                  type: string
                status:
                  type: string
                source:
                  type: string
                payload:
                  type: object
                diagnostics:
                  type: object
              required:
              - app_id
              - source
              - payload
              example:
                app_id: aacee9326f9b7c
                source: localhost
                payload:
                  test_data: '12345'
  "/webhooks/{webhookId}":
    get:
      summary: Retrieve the details of a single request log
      tags:
      - Activity
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: webhookId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request log details returned
          content:
            application/json:
              example:
                id: 176
                user_id: 311
                app_id: 4b583d7eed672e
                update_id:
                activity_type: request
                source: localhost
                status: '200'
                payload:
                  test_data: '12345'
                diagnostics:
                  errors: []
                  events: []
                created_at: '2022-03-16T13:36:35.003Z'
                updated_at: '2022-03-16T13:36:35.003Z'
              schema:
                type: object
                properties:
                  app_id:
                    type: string
                  update_id:
                    type: string
                    nullable: true
                  activity_type:
                    type: string
                  status:
                    type: string
                    nullable: true
                  source:
                    type: string
                  payload:
                    type: object
                    nullable: true
                  diagnostics:
                    type: object
                    nullable: true
                required:
                - app_id
                - source
                - payload
    put:
      summary: Update a request log with status and diagnostics
      tags:
      - Activity
      parameters:
      - name: webhookId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request log updated
          content:
            application/json:
              example:
                id: 177
                user_id: 312
                app_id: 454cf979618647
                update_id: d7eee81f-8187-41c7-8cc9-468cbb252d72
                activity_type: request
                source: localhost
                status: '500'
                payload:
                  test_data: '12345'
                diagnostics:
                  errors:
                  - name: FetchError
                    stack: |-
                      FetchError: request to http://localhost:5000/bogus failed, reason: connect ECONNREFUSED 127.0.0.1:5000
                          at processTicksAndRejections (internal/process/task_queues.js:84:21)
                  events:
                  - event: POST
                    detail:
                      url: http://localhost:5000/bogus
                      body: "{}"
                      method: POST
                      headers:
                        Content-Type: application/json
                    success: true
                created_at: '2022-03-16T13:36:35.288Z'
                updated_at: '2022-03-16T13:36:35.303Z'
              schema:
                type: object
                properties:
                  app_id:
                    type: string
                  update_id:
                    type: string
                    nullable: true
                  activity_type:
                    type: string
                  status:
                    type: string
                    nullable: true
                  source:
                    type: string
                  payload:
                    type: object
                    nullable: true
                  diagnostics:
                    type: object
                    nullable: true
                required:
                - app_id
                - source
                - payload
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                duration_ms:
                  type: integer
                diagnostics:
                  type: object
              required:
              - status
              example:
                status: '500'
                duration_ms: 2471
                diagnostics:
                  errors:
                  - name: FetchError
                    stack: |-
                      FetchError: request to http://localhost:5000/bogus failed, reason: connect ECONNREFUSED 127.0.0.1:5000
                          at processTicksAndRejections (internal/process/task_queues.js:84:21)
                  events:
                  - event: POST
                    detail:
                      url: http://localhost:5000/bogus
                      body: "{}"
                      method: POST
                      headers:
                        Content-Type: application/json
                    success: true
  "/webhooks/{appId}/send":
    post:
      summary: Send a request to an app
      tags:
      - Activity
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: appId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request sent
          content:
            application/json:
              example:
                status: 200
                message: OK
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                required:
                - status
                - message
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
              required:
              - payload
  "/webhooks/{webhookId}/resend":
    post:
      summary: Re-send the payload from a request to an app
      tags:
      - Activity
      security:
      - access_token: []
        client: []
        uid: []
        token_type: []
      parameters:
      - name: webhookId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Request re-sent
          content:
            application/json:
              example:
                status: 200
                message: OK
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  message:
                    type: string
                required:
                - status
                - message
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: https://trivial-api-staging.herokuapp.com/
components:
  securitySchemes:
    access_token:
      type: apiKey
      name: access-token
      in: header
    client:
      type: apiKey
      name: client
      in: header
    expiry:
      type: apiKey
      name: expiry
      in: header
    uid:
      type: apiKey
      name: uid
      in: header
    app_api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT
